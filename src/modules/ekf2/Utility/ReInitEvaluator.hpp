/****************************************************************************
 *
 *   Copyright (c) 2019 PX4 Development Team. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name PX4 nor the names of its contributors may be
 *    used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/

/**
 * @file ReInitEvaluator.hpp
 * Class evaluating the need of an estimator reinitialization
 * the check is simply based on the motion flag generated by the estimator.
 * If the vehicle is moved for a few seconds, the evaluator
 * will suggest to do a reset of the states and covariances when the vehicle
 * is again at rest.
 * If the vehilce is moved for a longer time, it will suggest to do a full
 * reset of the ekf when the vehicle is again at rest.
 *
 * Usage:
 * - Reset this class when armed
 * - Only check the output of this class when disarmed
 * - Reset this class when the state or the full reset
 *   of the estimator has been performed
 */

#pragma once

#include <hysteresis/hysteresis.h>

using namespace time_literals;

class ReInitEvaluator
{
public:
	ReInitEvaluator();
	~ReInitEvaluator() = default;

	void reset();
	void update(bool is_vehicle_at_rest);
	bool shouldResetAll() const { return _vehicle_moved_a_lot && canReset(); }
	bool shouldResetStatesAndCovariances() const { return _vehicle_moved && canReset(); }

private:
	void updateFilter(float dt, bool is_vehicle_at_rest);
	void updateMotionDetection();
	bool canReset() const { return !_vehicle_moving_hysteresis.get_state(); }

	// Note that the ekf already contains a hysteresis of 1 second to detect "at rest"
	// The value below should then be the desired time to detect a motion + 1
	static constexpr float _moved_time_threshold = (3 + 1) * 1_s;
	static constexpr float _moved_a_lot_time_threshold = (10 + 1) * 1_s;

	bool _vehicle_moved{};
	bool _vehicle_moved_a_lot{};
	systemlib::Hysteresis _vehicle_moving_hysteresis{false};
	systemlib::Hysteresis _vehicle_moving_a_lot_hysteresis{false};
};
